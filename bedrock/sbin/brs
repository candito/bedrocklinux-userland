#!/bedrock/bin/busybox sh
#
# brs (BedRock Setup)
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2012-2014 Daniel Thau <danthau@bedrocklinux.org>

# Abort if anything returns non-zero unexpectedly
set -e
# Abort if accessing unassigned variable
set -u

help() {
cat <<EOF
Usage: brs [enable|disable|reenable|update] [CLIENTS]

brs manages enabling and disabling clients.  To enable clients, run:
    brs enable <clients>
To disable:
    brs disable <clients>
To disable then reenable:
    brs reenable <clients>
If config/frameworks have changed since a client was enabled, if one would like
to add new mount items to a running client without disabling it, one can do
this like so:
    brs update <clients>
Note that \`brs update\` may miss things such as subshare items and new
components of a union item.
EOF
}

# Overwrite previous line
out() {
	# clear current line
	printf "\r"
	echo -n ${last_out:-} | sed 's/./ /g'
	# print new line without a newline
	printf "\r%s" "$@"
	# store line so we can know the length to overwrite next time
	last_out="$@"
}

# Ensure the mount source and destination both exist.  If only one exists,
# create the other. First arg is client, second arg is mount point
ensure_exists() {
	src=$2
	dst=/bedrock/clients/$1$2
	if [ -h $src ] || [ -h $dst ]
	then
		# no symlinks allowed
		return 1
	elif [ -e $src ] && [ -e $dst ]
	then
		# both exist, nothing special needs to be done
		return 0
	elif [ -d $src ] && ! [ -e $dst ]
	then
		mkdir -p $dst
		return $?
	elif [ -f $src ] && ! [ -e $dst ]
	then
		mkdir -p $(dirname $dst)
		touch $dst
		return $?
	elif ! [ -e $src ] && [ -d $dst ]
	then
		mkdir -p $src
		return $?
	elif ! [ -e $src ] && [ -f $dst ]
	then
		mkdir -p $(dirname $src)
		touch $src
		return $?
	else
		# couldn't resolve situation
		return 1
	fi
}

# Repeatedly call "body" while "status" shrinks in length.  If "status" stops
# shrinking, we're not making progress; stop.  Returns whether or not "status"
# was completely cleared.
repeat_down() {
	current=$(status)
	# previous is one character longer than current status to ensure at least
	# one loop
	previous="x$current"
	while [ ${#current} -gt 0 ] && [ ${#current} -lt ${#previous} ]
	do
		body
		previous="$current"
		current=$(status)
	done
	[ ${#current} -eq 0 ]
}

# Filters out lines which are in the "preexist" variable.
preexist_filter() {
	awk -v"preexist=$preexist" -F'[ :]' '
		BEGIN {
			$0=preexist
			for (i=1; i<=NF; i++) {
				a[$i]=$i
			}
		}
		!($1 in a) {
			print $0
		}
	'
}

# Disable a client
disable() {
	client="$1"

	out "[1/6] Disabling $client: executing predisable..."
	for exe in $(bri -c $client predisable)
	do
		. $exe "$client"
	done

	out "[2/6] Disabling $client: killing processes..."
	status() {
		bri -P "$client" | cut -d' ' -f1 | xargs
	}
	body() {
		kill $current || sleep 2 && kill -9 $current
	}
	if ! repeat_down
	then
		echo ""
		echo "ERROR: Could not kill all processes"
		echo "See bri -P $client"
		exit 1
	fi

	out "[3/6] Disabling $client: unmounting..."
	status() {
		bri -m $client | awk '{print "/bedrock/clients/'"$client"'"$1}' 2>/dev/null
	}
	body() {
		for mount in $current
		do
			mount --make-private "$mount" 2>/dev/null
			umount "$mount" 2>/dev/null
		done
	}
	if ! repeat_down
	then
		# try again with lazy umounting
		body() {
			for mount in $current
			do
				mount --make-private "$mount" 2>/dev/null
				umount -l "$mount" 2>/dev/null
			done
		}
		if ! repeat_down
		then
			echo ""
			echo "ERROR: Could not unmount all mount points"
			echo "See bri -m $client"
			exit 1
		fi
	fi

	out "[4/6] Disabling $client: double-checking..."
	if [ "x$(bri -P "$client")x" != "xx" ]
	then
		echo ""
		echo "Processes remain."
		echo "See bri -P $client"
		exit 1
	fi
	if [ "x$(bri -m "$client")x" != "xx" ]
	then
		echo ""
		echo "Mounts remain."
		echo "See bri -m $client"
		exit 1
	fi

	out "[5/6] Disabling $client: executing postdisable..."
	for exe in $(bri -c $client postdisable)
	do
		. $exe "$client"
	done

	out "[6/6] Disabling $client: setting as disabled..."
	if [ -r "/bedrock/etc/clients.d/$client.conf" ]
	then
		if [ -r "/bedrock/etc/clients.d/$client.conf.disabled" ]
		then
			echo ""
			echo "ERROR:"
			echo "Config exists for both states:"
			echo "    /bedrock/etc/clients.d/$client.conf"
			echo "and"
			echo "    /bedrock/etc/clients.d/$client.conf.disabled"
			echo "This must be resolved manually."
		else
			mv /bedrock/etc/clients.d/$client.conf /bedrock/etc/clients.d/$client.conf.disabled
			echo " done"
		fi
	else
		if [ -r "/bedrock/etc/clients.d/$1.conf.disabled" ]
		then
			echo " done"
		else
			# Should be pretty unlikely this happens, but just in case.
			echo ""
			echo "ERROR:"
			echo "No config exists."
			echo "This must be resolved manually."
		fi
	fi

	# tell brp about the change
	echo 1 > /bedrock/brpath/reparse_config
}

# this does enable *and* update
# difference is that enable (1) refuses to operate if client is even partially
# enabled and (2) runs pre/post enable scripts
enable() {
	client="$1"

	if [ "${2:-}" = "update" ]
	then
		max=5
		cur=1
	else
		# doing enable, not update
		if [ "x$(bri -m "$client")x" != "xx" ]
		then
			echo ""
			echo "ERROR: $client already has mounts, refusing to continue." >&2
			echo "Consider alternative brs command, see \`brs --help\`" >&2
			return
		fi
		max=7

		out "[1/$max] Enabling $client: executing preenable..."
		for exe in $(bri -c $client preenable)
		do
			. $exe $client
		done
		cur=2
	fi

	preexist="$(bri -m $client | awk -F'[ :]' '{print$1}' | xargs)"

	out "[$cur/$max] Enabling $client: mounting share..."
	cur=$(expr $cur + 1)
	for mount in $(bri -c $client share | preexist_filter)
	do
		# ensure the mount point exists on both ends
		if ! ensure_exists "$client" "$mount"
		then
cat <<EOF 2>&1

ERROR: Problem ensuring mount point exists on both ends.
- Are you mounting on a symlink on a symlink or some other non-normal,
non-directory file?
- Does the mount point exist on at least one end?
EOF
			return
		fi
		# Note we're in the core, so /proc/$$/mountinfo is the core's point of
		# view.  We're checking to see if the core has a mount point here.  If
		# not, we'll create one by bind-mounting a directory to itself.  This
		# is necessary for --make-shared to work.
		if awk -v"mount=$mount" '$5 == mount {exit 1}' /proc/$$/mountinfo
		then
			mount --bind "$mount" "$mount"
		fi
		# ensure core's copy is shared
		mount --make-rshared "$mount"
		mount --rbind "$mount" "/bedrock/clients/$client$mount"
	done

	out "[$cur/$max] Enabling $client: mounting bind..."
	cur=$(expr $cur + 1)
	for mount in $(bri -c $client bind | preexist_filter)
	do
		# ensure the mount point exists on both ends
		if ! ensure_exists "$client" "$mount"
		then
cat <<EOF 2>&1

ERROR: Problem ensuring mount point exists on both ends.
- Are you mounting on a symlink on a symlink or some other non-normal,
non-directory file?
- Does the mount point exist on at least one end?
EOF
			return
		fi
		mount --bind "$mount" "/bedrock/clients/$client$mount"
		mount --make-private "/bedrock/clients/$client$mount"
	done

	# note this needs to be after bind for self-view in /bedrock/clients
	out "[$cur/$max] Enabling $client: mounting union..."
	cur=$(expr $cur + 1)
	bri -c $client union | preexist_filter | awk -v"client=$client" -F'([ ,:]|\\t)+' '
		{
			# first arg should be bru mount point
			# e.g.: /bedrock/sbin/bru /bedrock/clients/squeeze/etc
			cmd = "/bedrock/sbin/bru /bedrock/clients/"client$1
			# second arg should be the equivalent location in the core
			cmd = cmd" "$1
			# remaining args are files to be redirected to the core
			for (i=2; i<=NF; i++) {
				cmd = cmd " "$i
			}
			# background it so this process will return
			cmd = cmd "&"
			# run it
			system(cmd)
			# bru may take a fraction of a second to start if we do not
			# wait here, the result check below will think it is not
			# mounted
			system("sleep .25")
		}
	'

	out "[$cur/$max] Enabling $client: double-checking..."
	cur=$(expr $cur + 1)
	if ! bri -s $client | grep -q "fully mounted"
	then
		echo ""
		echo "ERROR: Failed to fully mount $client"
		echo "See bri -s $client"
		exit 1
	fi

	if [ "${2:-}" != "update" ]
	then
		out "[$cur/$max] Enabling $client: executing prepost..."
		cur=$(expr $cur + 1)
		for exe in $(bri -c $client postenable)
		do
			. $exe $client
		done
	fi

	out "[$cur/$max] Enabling $client: setting as enabled..."
	cur=$(expr $cur + 1)
	if [ -r "/bedrock/etc/clients.d/$client.conf" ]
	then
		if [ -r "/bedrock/etc/clients.d/$client.conf.disabled" ]
		then
			echo ""
			echo "ERROR:"
			echo "Config exists for both states:"
			echo "    /bedrock/etc/clients.d/$client.conf"
			echo "and"
			echo "    /bedrock/etc/clients.d/$client.conf.disabled"
			echo "This must be resolved manually."
		else
			echo " done"
		fi
	else
		if [ -r "/bedrock/etc/clients.d/$client.conf.disabled" ]
		then
			mv /bedrock/etc/clients.d/$client.conf.disabled /bedrock/etc/clients.d/$client.conf
			echo " done"
		else
			# Should be pretty unlikely this happens, but just in case.
			echo ""
			echo "ERROR:"
			echo "No config exists."
			echo "This must be resolved manually."
		fi
	fi

	# tell brp about the change
	echo 1 > /bedrock/brpath/reparse_config
}

update() {
	enable "$1" "update"
}

# brs has to run in the core rather than a client, as the core will see the
# mount points differently from any client.  Moreover, unlike clients, the core
# cannot be taken down; if the user attempts to take down the client running
# brs things could become problematic.
if [ "$(bri -n)" != "bedrock" ]
then
	exec /bedrock/bin/brc bedrock $0 $@
fi

action="$1"
shift
while [ -n "${1:-}" ]
do
	if [ "$1" = "bedrock" ]
	then
		echo "Cannot enable/disable Bedrock Linux core"
		shift
		continue
	fi
	case "$action" in
		"enable")
			enable "$1";;
		"reenable")
			disable "$1" && enable "$1";;
		"disable")
			disable "$1";;
		"update")
			update "$1";;
		*)
			help
			exit 1;;
	esac
	shift
done
